
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEASSIGN COLON DEF DIVIDE IDENTIFIER IF LPAREN MINUS NUMBER PLUS PRINT RPAREN STRING TIMESprogram : statement_liststatement_list : statement_list statement\n                         | statementstatement : simple_statement\n                     | compound_statementsimple_statement : assignment_statement\n                            | expression_statementassignment_statement : IDENTIFIER ASSIGN expressionexpression_statement : expressionexpression : expression PLUS term\n                     | expression MINUS term\n                     | PRINT LPAREN expression RPAREN\n                     | termterm : term TIMES factor\n                | term DIVIDE factor\n                | factorfactor : NUMBER\n                  | STRING\n                  | IDENTIFIER\n                  | LPAREN expression RPARENcompound_statement : if_statement\n                             | function_definitionif_statement : IF expression COLON statement_listfunction_definition : DEF IDENTIFIER LPAREN RPAREN COLON statement_list'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,25,28,29,30,31,32,33,34,36,37,38,40,42,43,44,],[10,10,-3,-4,-5,-6,-7,-21,-22,-19,-9,25,26,25,-13,-16,-17,-18,-2,25,25,25,-19,25,25,25,-8,-10,-11,10,-20,-14,-15,10,-12,10,10,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,15,17,18,19,20,25,31,32,33,34,36,37,38,40,42,43,44,],[12,12,-3,-4,-5,-6,-7,-21,-22,-19,-9,-13,-16,-17,-18,-2,-19,-8,-10,-11,12,-20,-14,-15,12,-12,12,12,]),'DEF':([0,2,3,4,5,6,7,8,9,10,11,15,17,18,19,20,25,31,32,33,34,36,37,38,40,42,43,44,],[13,13,-3,-4,-5,-6,-7,-21,-22,-19,-9,-13,-16,-17,-18,-2,-19,-8,-10,-11,13,-20,-14,-15,13,-12,13,13,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,17,18,19,20,21,25,30,31,32,33,34,36,37,38,40,42,43,44,],[16,16,-3,-4,-5,-6,-7,-21,-22,-19,-9,16,16,-13,-16,-17,-18,-2,16,-19,16,-8,-10,-11,16,-20,-14,-15,16,-12,16,16,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,17,18,19,20,21,22,23,25,28,29,30,31,32,33,34,36,37,38,40,42,43,44,],[18,18,-3,-4,-5,-6,-7,-21,-22,-19,-9,18,18,-13,-16,-17,-18,-2,18,18,18,-19,18,18,18,-8,-10,-11,18,-20,-14,-15,18,-12,18,18,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,17,18,19,20,21,22,23,25,28,29,30,31,32,33,34,36,37,38,40,42,43,44,],[19,19,-3,-4,-5,-6,-7,-21,-22,-19,-9,19,19,-13,-16,-17,-18,-2,19,19,19,-19,19,19,19,-8,-10,-11,19,-20,-14,-15,19,-12,19,19,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,25,26,28,29,30,31,32,33,34,36,37,38,40,42,43,44,],[14,14,-3,-4,-5,-6,-7,-21,-22,-19,-9,14,14,-13,30,-16,-17,-18,-2,14,14,14,-19,35,14,14,14,-8,-10,-11,14,-20,-14,-15,14,-12,14,14,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,15,17,18,19,20,25,31,32,33,36,37,38,40,42,44,],[0,-1,-3,-4,-5,-6,-7,-21,-22,-19,-9,-13,-16,-17,-18,-2,-19,-8,-10,-11,-20,-14,-15,-23,-12,-24,]),'ASSIGN':([10,],[21,]),'TIMES':([10,15,17,18,19,25,32,33,36,37,38,],[-19,28,-16,-17,-18,-19,28,28,-20,-14,-15,]),'DIVIDE':([10,15,17,18,19,25,32,33,36,37,38,],[-19,29,-16,-17,-18,-19,29,29,-20,-14,-15,]),'PLUS':([10,11,15,17,18,19,24,25,27,31,32,33,36,37,38,39,42,],[-19,22,-13,-16,-17,-18,22,-19,22,22,-10,-11,-20,-14,-15,22,-12,]),'MINUS':([10,11,15,17,18,19,24,25,27,31,32,33,36,37,38,39,42,],[-19,23,-13,-16,-17,-18,23,-19,23,23,-10,-11,-20,-14,-15,23,-12,]),'COLON':([15,17,18,19,24,25,32,33,36,37,38,41,42,],[-13,-16,-17,-18,34,-19,-10,-11,-20,-14,-15,43,-12,]),'RPAREN':([15,17,18,19,25,27,32,33,35,36,37,38,39,42,],[-13,-16,-17,-18,-19,36,-10,-11,41,-20,-14,-15,42,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,34,43,],[2,40,44,]),'statement':([0,2,34,40,43,44,],[3,20,3,20,3,20,]),'simple_statement':([0,2,34,40,43,44,],[4,4,4,4,4,4,]),'compound_statement':([0,2,34,40,43,44,],[5,5,5,5,5,5,]),'assignment_statement':([0,2,34,40,43,44,],[6,6,6,6,6,6,]),'expression_statement':([0,2,34,40,43,44,],[7,7,7,7,7,7,]),'if_statement':([0,2,34,40,43,44,],[8,8,8,8,8,8,]),'function_definition':([0,2,34,40,43,44,],[9,9,9,9,9,9,]),'expression':([0,2,12,14,21,30,34,40,43,44,],[11,11,24,27,31,39,11,11,11,11,]),'term':([0,2,12,14,21,22,23,30,34,40,43,44,],[15,15,15,15,15,32,33,15,15,15,15,15,]),'factor':([0,2,12,14,21,22,23,28,29,30,34,40,43,44,],[17,17,17,17,17,17,17,37,38,17,17,17,17,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement -> simple_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',37),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','parser.py',42),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','parser.py',43),
  ('assignment_statement -> IDENTIFIER ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',48),
  ('expression_statement -> expression','expression_statement',1,'p_expression_statement','parser.py',53),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',58),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',59),
  ('expression -> PRINT LPAREN expression RPAREN','expression',4,'p_expression','parser.py',60),
  ('expression -> term','expression',1,'p_expression','parser.py',61),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',71),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',72),
  ('term -> factor','term',1,'p_term','parser.py',73),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',81),
  ('factor -> STRING','factor',1,'p_factor','parser.py',82),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser.py',83),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',84),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','parser.py',92),
  ('compound_statement -> function_definition','compound_statement',1,'p_compound_statement','parser.py',93),
  ('if_statement -> IF expression COLON statement_list','if_statement',4,'p_if_statement','parser.py',98),
  ('function_definition -> DEF IDENTIFIER LPAREN RPAREN COLON statement_list','function_definition',6,'p_function_definition','parser.py',103),
]
